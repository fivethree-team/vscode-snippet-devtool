"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const billy_core_1 = require("@fivethree/billy-core");
const plugins_1 = require("./plugins");
const path = {
    name: 'path',
    description: 'The path to the snippet repository',
    optional: true
};
let SnippetDevtool = class SnippetDevtool extends plugins_1.Plugins {
    publish(path) {
        return __awaiter(this, void 0, void 0, function* () {
            path = path || '.';
            const isClean = yield this.git_porcelain(path);
            if (!isClean) {
                this.print('Git Repository is dirty!');
                return;
            }
            yield this.promptVersion(path);
            yield this.docs(path);
            yield this.publishToVSCode(path);
        });
    }
    docs(path) {
        return __awaiter(this, void 0, void 0, function* () {
            path = path || '.';
            const packageJSON = this.parseJSON(path + '/package.json');
            const snippets = packageJSON.contributes.snippets;
            const snippetDocs = [];
            snippets.forEach(s => {
                const snippetJSON = this.parseJSON(path + '/' + s.path);
                const snippetDoc = { snippet: snippetJSON, meta: s, keys: Object.keys(snippetJSON) };
                snippetDocs.push(snippetDoc);
            });
            const mdBuilder = this.createMdBuilder({ hasAutoGeneratedComment: true })
                .lineBreak()
                .h1('Snippets Documentation', true)
                .text('| Prefix | Description |')
                .text('| ------- | ----------|')
                .text('| `s-` | Svelte Snippets |')
                .lineBreak();
            const headers = [{ key: 'prefix', title: 'Prefix' }, { key: 'description', title: 'Description' }];
            snippetDocs.forEach(doc => {
                const contents = [];
                doc.keys
                    .forEach(k => contents.push(doc.snippet[k]));
                mdBuilder
                    .h2(this.camelcase(doc.meta.language, true), true)
                    .lineBreak()
                    .table(headers, contents)
                    .lineBreak();
            });
            mdBuilder.text('**[â¬† back to top](#table-of-content)**');
            let readme = this.readText(path + '/README.md');
            const index = readme.indexOf(this.mdComment('Auto Generated Below'));
            if (index > -1) {
                readme = readme.substring(0, index);
            }
            this.writeText(path + '/README.md', readme + mdBuilder.build());
        });
    }
    promptVersion(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const answer = yield this.prompt([
                {
                    type: 'list',
                    name: 'update',
                    message: 'Which version do you want to update the Markdown Plugin too?',
                    choices: [
                        { name: 'Patch', value: 0 },
                        { name: 'Minor', value: 1 },
                        { name: 'Major', value: 2 },
                    ]
                }
            ]);
            switch (answer.update) {
                case 0:
                    yield this.exec(`cd ${path} && npm version patch`, true);
                    break;
                case 1:
                    yield this.exec(`cd ${path} && npm version minor`, true);
                    break;
                case 2:
                    yield this.exec(`cd ${path} && npm version major`, true);
                    break;
            }
        });
    }
    publishToVSCode(path) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.exec(`cd ${path} && vsce publish`, true);
        });
    }
};
__decorate([
    billy_core_1.Lane('Publish a new version of the snippet tool'),
    __param(0, billy_core_1.param(path)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SnippetDevtool.prototype, "publish", null);
__decorate([
    billy_core_1.Lane('Create Snippet Documentation and append it to readme'),
    __param(0, billy_core_1.param(path)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SnippetDevtool.prototype, "docs", null);
__decorate([
    billy_core_1.Action('prompt the user for the version'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SnippetDevtool.prototype, "promptVersion", null);
__decorate([
    billy_core_1.Action('prompt the user for the version'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], SnippetDevtool.prototype, "publishToVSCode", null);
SnippetDevtool = __decorate([
    billy_core_1.App()
], SnippetDevtool);
exports.SnippetDevtool = SnippetDevtool;
